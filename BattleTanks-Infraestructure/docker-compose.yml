services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.8-alpine
    container_name: battletanks-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: battle_tanks
      POSTGRES_USER: battleuser
      POSTGRES_PASSWORD: battlepass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - battletanks-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U battleuser -d battle_tanks"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.4.1-alpine
    container_name: battletanks-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - battletanks-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: battletanks-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@battletanks.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - battletanks-network

  # Redis Commander for Redis management
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:0.8.1
    container_name: battletanks-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - battletanks-network

  # MQTT broker with web management UI. EMQX is used as it provides both MQTT and WebSocket
  # listeners out of the box as well as a dashboard to observe topics and messages.
  mqtt:
    image: emqx/emqx:5.5.0
    container_name: battletanks-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"      # MQTT TCP
      - "8083:8083"      # MQTT over WebSocket
      - "18083:18083"    # Management Dashboard
    environment:
      EMQX_NAME: battletanks-mqtt
      EMQX_LISTENER__TCP__EXTERNAL: 1883
      EMQX_LISTENER__WS__DEFAULT: 8083
    networks:
      - battletanks-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  battletanks-network:
    driver: bridge